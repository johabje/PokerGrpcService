// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: game.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GrpcConsoleClient {

  /// <summary>Holder for reflection information generated from game.proto</summary>
  public static partial class GameReflection {

    #region Descriptor
    /// <summary>File descriptor for game.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpnYW1lLnByb3RvIisKDk5ld0dhbWVSZXF1ZXN0EhkKB2dwbGF5ZXIYASAB",
            "KAsyCC5HUGxheWVyIj0KD0pvaW5HYW1lUmVxdWVzdBIPCgdnYW1lUGluGAEg",
            "ASgFEhkKB2dwbGF5ZXIYAiABKAsyCC5HUGxheWVyIpwBCglHYW1lTG9iYnkS",
            "DwoHZ2FtZVBpbhgBIAEoBRIaCghncGxheWVycxgCIAMoCzIILkdQbGF5ZXIS",
            "FwoFdG9BY3QYAyABKAsyCC5HUGxheWVyEhIKCnRhYmxlQ2FyZHMYBCABKAkS",
            "CwoDcG90GAUgASgBEgsKA2JldBgGIAEoARINCgVibGluZBgHIAEoBRIMCgRo",
            "YW5kGAggASgJIlcKDUFjdGlvblJlcXVlc3QSDgoGYWN0aW9uGAEgASgJEgsK",
            "A2JldBgCIAEoBRIPCgdnYW1lUGluGAMgASgFEhgKBnBsYXllchgEIAEoCzII",
            "LkdQbGF5ZXIiXwoHR1BsYXllchIOCgZ3YWxsZXQYAiABKAESDAoEbmFtZRgB",
            "IAEoCRITCgtpc1Jvb21Pd25lchgDIAEoCBIRCgliZXN0Q29tYm8YBCABKAkS",
            "DgoGYWN0aW9uGAUgASgFMoQBCgRHYW1lEiwKDUNyZWF0ZU5ld0dhbWUSDy5O",
            "ZXdHYW1lUmVxdWVzdBoKLkdhbWVMb2JieRIoCghKb2luR2FtZRIQLkpvaW5H",
            "YW1lUmVxdWVzdBoKLkdhbWVMb2JieRIkCgZBY3Rpb24SDi5BY3Rpb25SZXF1",
            "ZXN0GgouR2FtZUxvYmJ5QhSqAhFHcnBjQ29uc29sZUNsaWVudGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcConsoleClient.NewGameRequest), global::GrpcConsoleClient.NewGameRequest.Parser, new[]{ "Gplayer", "GamePin", "MaxBuyin", "MinBuyin", "SmallBlind" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcConsoleClient.JoinGameRequest), global::GrpcConsoleClient.JoinGameRequest.Parser, new[]{ "GamePin", "Gplayer" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcConsoleClient.GameLobby), global::GrpcConsoleClient.GameLobby.Parser, new[]{ "GamePin", "Gplayers", "ToAct", "TableCards", "Pot", "Bet", "Blind", "Hand" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcConsoleClient.ActionRequest), global::GrpcConsoleClient.ActionRequest.Parser, new[]{ "Action", "Bet", "GamePin", "Player" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcConsoleClient.GPlayer), global::GrpcConsoleClient.GPlayer.Parser, new[]{ "Wallet", "Name", "IsRoomOwner", "BestCombo", "Action" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class NewGameRequest : pb::IMessage<NewGameRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NewGameRequest> _parser = new pb::MessageParser<NewGameRequest>(() => new NewGameRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewGameRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcConsoleClient.GameReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewGameRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewGameRequest(NewGameRequest other) : this() {
      gplayer_ = other.gplayer_ != null ? other.gplayer_.Clone() : null;
      gamePin_ = other.gamePin_;
      maxBuyin_ = other.maxBuyin_;
      minBuyin_ = other.minBuyin_;
      smallBlind_ = other.smallBlind_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewGameRequest Clone() {
      return new NewGameRequest(this);
    }

    /// <summary>Field number for the "gplayer" field.</summary>
    public const int GplayerFieldNumber = 1;
    private global::GrpcConsoleClient.GPlayer gplayer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GrpcConsoleClient.GPlayer Gplayer {
      get { return gplayer_; }
      set {
        gplayer_ = value;
      }
    }

    /// <summary>Field number for the "gamePin" field.</summary>
    public const int GamePinFieldNumber = 2;
    private int gamePin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GamePin {
      get { return gamePin_; }
      set {
        gamePin_ = value;
      }
    }

    /// <summary>Field number for the "maxBuyin" field.</summary>
    public const int MaxBuyinFieldNumber = 3;
    private int maxBuyin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxBuyin {
      get { return maxBuyin_; }
      set {
        maxBuyin_ = value;
      }
    }

    /// <summary>Field number for the "minBuyin" field.</summary>
    public const int MinBuyinFieldNumber = 4;
    private int minBuyin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinBuyin {
      get { return minBuyin_; }
      set {
        minBuyin_ = value;
      }
    }

    /// <summary>Field number for the "smallBlind" field.</summary>
    public const int SmallBlindFieldNumber = 5;
    private int smallBlind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SmallBlind {
      get { return smallBlind_; }
      set {
        smallBlind_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewGameRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewGameRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Gplayer, other.Gplayer)) return false;
      if (GamePin != other.GamePin) return false;
      if (MaxBuyin != other.MaxBuyin) return false;
      if (MinBuyin != other.MinBuyin) return false;
      if (SmallBlind != other.SmallBlind) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gplayer_ != null) hash ^= Gplayer.GetHashCode();
      if (GamePin != 0) hash ^= GamePin.GetHashCode();
      if (MaxBuyin != 0) hash ^= MaxBuyin.GetHashCode();
      if (MinBuyin != 0) hash ^= MinBuyin.GetHashCode();
      if (SmallBlind != 0) hash ^= SmallBlind.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (gplayer_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Gplayer);
      }
      if (GamePin != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GamePin);
      }
      if (MaxBuyin != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxBuyin);
      }
      if (MinBuyin != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MinBuyin);
      }
      if (SmallBlind != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SmallBlind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (gplayer_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Gplayer);
      }
      if (GamePin != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GamePin);
      }
      if (MaxBuyin != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxBuyin);
      }
      if (MinBuyin != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MinBuyin);
      }
      if (SmallBlind != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SmallBlind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gplayer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gplayer);
      }
      if (GamePin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GamePin);
      }
      if (MaxBuyin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxBuyin);
      }
      if (MinBuyin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinBuyin);
      }
      if (SmallBlind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SmallBlind);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewGameRequest other) {
      if (other == null) {
        return;
      }
      if (other.gplayer_ != null) {
        if (gplayer_ == null) {
          Gplayer = new global::GrpcConsoleClient.GPlayer();
        }
        Gplayer.MergeFrom(other.Gplayer);
      }
      if (other.GamePin != 0) {
        GamePin = other.GamePin;
      }
      if (other.MaxBuyin != 0) {
        MaxBuyin = other.MaxBuyin;
      }
      if (other.MinBuyin != 0) {
        MinBuyin = other.MinBuyin;
      }
      if (other.SmallBlind != 0) {
        SmallBlind = other.SmallBlind;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (gplayer_ == null) {
              Gplayer = new global::GrpcConsoleClient.GPlayer();
            }
            input.ReadMessage(Gplayer);
            break;
          }
          case 16: {
            GamePin = input.ReadInt32();
            break;
          }
          case 24: {
            MaxBuyin = input.ReadInt32();
            break;
          }
          case 32: {
            MinBuyin = input.ReadInt32();
            break;
          }
          case 40: {
            SmallBlind = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (gplayer_ == null) {
              Gplayer = new global::GrpcConsoleClient.GPlayer();
            }
            input.ReadMessage(Gplayer);
            break;
          }
          case 16: {
            GamePin = input.ReadInt32();
            break;
          }
          case 24: {
            MaxBuyin = input.ReadInt32();
            break;
          }
          case 32: {
            MinBuyin = input.ReadInt32();
            break;
          }
          case 40: {
            SmallBlind = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class JoinGameRequest : pb::IMessage<JoinGameRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JoinGameRequest> _parser = new pb::MessageParser<JoinGameRequest>(() => new JoinGameRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinGameRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcConsoleClient.GameReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinGameRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinGameRequest(JoinGameRequest other) : this() {
      gamePin_ = other.gamePin_;
      gplayer_ = other.gplayer_ != null ? other.gplayer_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinGameRequest Clone() {
      return new JoinGameRequest(this);
    }

    /// <summary>Field number for the "gamePin" field.</summary>
    public const int GamePinFieldNumber = 1;
    private int gamePin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GamePin {
      get { return gamePin_; }
      set {
        gamePin_ = value;
      }
    }

    /// <summary>Field number for the "gplayer" field.</summary>
    public const int GplayerFieldNumber = 2;
    private global::GrpcConsoleClient.GPlayer gplayer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GrpcConsoleClient.GPlayer Gplayer {
      get { return gplayer_; }
      set {
        gplayer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinGameRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinGameRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GamePin != other.GamePin) return false;
      if (!object.Equals(Gplayer, other.Gplayer)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GamePin != 0) hash ^= GamePin.GetHashCode();
      if (gplayer_ != null) hash ^= Gplayer.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GamePin != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GamePin);
      }
      if (gplayer_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Gplayer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GamePin != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GamePin);
      }
      if (gplayer_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Gplayer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GamePin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GamePin);
      }
      if (gplayer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gplayer);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinGameRequest other) {
      if (other == null) {
        return;
      }
      if (other.GamePin != 0) {
        GamePin = other.GamePin;
      }
      if (other.gplayer_ != null) {
        if (gplayer_ == null) {
          Gplayer = new global::GrpcConsoleClient.GPlayer();
        }
        Gplayer.MergeFrom(other.Gplayer);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GamePin = input.ReadInt32();
            break;
          }
          case 18: {
            if (gplayer_ == null) {
              Gplayer = new global::GrpcConsoleClient.GPlayer();
            }
            input.ReadMessage(Gplayer);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GamePin = input.ReadInt32();
            break;
          }
          case 18: {
            if (gplayer_ == null) {
              Gplayer = new global::GrpcConsoleClient.GPlayer();
            }
            input.ReadMessage(Gplayer);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GameLobby : pb::IMessage<GameLobby>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameLobby> _parser = new pb::MessageParser<GameLobby>(() => new GameLobby());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameLobby> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcConsoleClient.GameReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameLobby() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameLobby(GameLobby other) : this() {
      gamePin_ = other.gamePin_;
      gplayers_ = other.gplayers_.Clone();
      toAct_ = other.toAct_;
      tableCards_ = other.tableCards_;
      pot_ = other.pot_;
      bet_ = other.bet_;
      blind_ = other.blind_;
      hand_ = other.hand_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameLobby Clone() {
      return new GameLobby(this);
    }

    /// <summary>Field number for the "gamePin" field.</summary>
    public const int GamePinFieldNumber = 1;
    private int gamePin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GamePin {
      get { return gamePin_; }
      set {
        gamePin_ = value;
      }
    }

    /// <summary>Field number for the "gplayers" field.</summary>
    public const int GplayersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GrpcConsoleClient.GPlayer> _repeated_gplayers_codec
        = pb::FieldCodec.ForMessage(18, global::GrpcConsoleClient.GPlayer.Parser);
    private readonly pbc::RepeatedField<global::GrpcConsoleClient.GPlayer> gplayers_ = new pbc::RepeatedField<global::GrpcConsoleClient.GPlayer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GrpcConsoleClient.GPlayer> Gplayers {
      get { return gplayers_; }
    }

    /// <summary>Field number for the "toAct" field.</summary>
    public const int ToActFieldNumber = 3;
    private string toAct_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ToAct {
      get { return toAct_; }
      set {
        toAct_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tableCards" field.</summary>
    public const int TableCardsFieldNumber = 4;
    private string tableCards_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableCards {
      get { return tableCards_; }
      set {
        tableCards_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pot" field.</summary>
    public const int PotFieldNumber = 5;
    private float pot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Pot {
      get { return pot_; }
      set {
        pot_ = value;
      }
    }

    /// <summary>Field number for the "bet" field.</summary>
    public const int BetFieldNumber = 6;
    private float bet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Bet {
      get { return bet_; }
      set {
        bet_ = value;
      }
    }

    /// <summary>Field number for the "blind" field.</summary>
    public const int BlindFieldNumber = 7;
    private int blind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Blind {
      get { return blind_; }
      set {
        blind_ = value;
      }
    }

    /// <summary>Field number for the "hand" field.</summary>
    public const int HandFieldNumber = 8;
    private string hand_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hand {
      get { return hand_; }
      set {
        hand_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameLobby);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameLobby other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GamePin != other.GamePin) return false;
      if(!gplayers_.Equals(other.gplayers_)) return false;
      if (ToAct != other.ToAct) return false;
      if (TableCards != other.TableCards) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Pot, other.Pot)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Bet, other.Bet)) return false;
      if (Blind != other.Blind) return false;
      if (Hand != other.Hand) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GamePin != 0) hash ^= GamePin.GetHashCode();
      hash ^= gplayers_.GetHashCode();
      if (ToAct.Length != 0) hash ^= ToAct.GetHashCode();
      if (TableCards.Length != 0) hash ^= TableCards.GetHashCode();
      if (Pot != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Pot);
      if (Bet != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Bet);
      if (Blind != 0) hash ^= Blind.GetHashCode();
      if (Hand.Length != 0) hash ^= Hand.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GamePin != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GamePin);
      }
      gplayers_.WriteTo(output, _repeated_gplayers_codec);
      if (ToAct.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ToAct);
      }
      if (TableCards.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TableCards);
      }
      if (Pot != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Pot);
      }
      if (Bet != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Bet);
      }
      if (Blind != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Blind);
      }
      if (Hand.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Hand);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GamePin != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GamePin);
      }
      gplayers_.WriteTo(ref output, _repeated_gplayers_codec);
      if (ToAct.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ToAct);
      }
      if (TableCards.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TableCards);
      }
      if (Pot != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Pot);
      }
      if (Bet != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Bet);
      }
      if (Blind != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Blind);
      }
      if (Hand.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Hand);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GamePin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GamePin);
      }
      size += gplayers_.CalculateSize(_repeated_gplayers_codec);
      if (ToAct.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ToAct);
      }
      if (TableCards.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableCards);
      }
      if (Pot != 0F) {
        size += 1 + 4;
      }
      if (Bet != 0F) {
        size += 1 + 4;
      }
      if (Blind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Blind);
      }
      if (Hand.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hand);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameLobby other) {
      if (other == null) {
        return;
      }
      if (other.GamePin != 0) {
        GamePin = other.GamePin;
      }
      gplayers_.Add(other.gplayers_);
      if (other.ToAct.Length != 0) {
        ToAct = other.ToAct;
      }
      if (other.TableCards.Length != 0) {
        TableCards = other.TableCards;
      }
      if (other.Pot != 0F) {
        Pot = other.Pot;
      }
      if (other.Bet != 0F) {
        Bet = other.Bet;
      }
      if (other.Blind != 0) {
        Blind = other.Blind;
      }
      if (other.Hand.Length != 0) {
        Hand = other.Hand;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GamePin = input.ReadInt32();
            break;
          }
          case 18: {
            gplayers_.AddEntriesFrom(input, _repeated_gplayers_codec);
            break;
          }
          case 26: {
            ToAct = input.ReadString();
            break;
          }
          case 34: {
            TableCards = input.ReadString();
            break;
          }
          case 45: {
            Pot = input.ReadFloat();
            break;
          }
          case 53: {
            Bet = input.ReadFloat();
            break;
          }
          case 56: {
            Blind = input.ReadInt32();
            break;
          }
          case 66: {
            Hand = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GamePin = input.ReadInt32();
            break;
          }
          case 18: {
            gplayers_.AddEntriesFrom(ref input, _repeated_gplayers_codec);
            break;
          }
          case 26: {
            ToAct = input.ReadString();
            break;
          }
          case 34: {
            TableCards = input.ReadString();
            break;
          }
          case 45: {
            Pot = input.ReadFloat();
            break;
          }
          case 53: {
            Bet = input.ReadFloat();
            break;
          }
          case 56: {
            Blind = input.ReadInt32();
            break;
          }
          case 66: {
            Hand = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ActionRequest : pb::IMessage<ActionRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ActionRequest> _parser = new pb::MessageParser<ActionRequest>(() => new ActionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcConsoleClient.GameReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionRequest(ActionRequest other) : this() {
      action_ = other.action_;
      bet_ = other.bet_;
      gamePin_ = other.gamePin_;
      player_ = other.player_ != null ? other.player_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionRequest Clone() {
      return new ActionRequest(this);
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 1;
    private string action_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Action {
      get { return action_; }
      set {
        action_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bet" field.</summary>
    public const int BetFieldNumber = 2;
    private int bet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bet {
      get { return bet_; }
      set {
        bet_ = value;
      }
    }

    /// <summary>Field number for the "gamePin" field.</summary>
    public const int GamePinFieldNumber = 3;
    private int gamePin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GamePin {
      get { return gamePin_; }
      set {
        gamePin_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 4;
    private global::GrpcConsoleClient.GPlayer player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GrpcConsoleClient.GPlayer Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Action != other.Action) return false;
      if (Bet != other.Bet) return false;
      if (GamePin != other.GamePin) return false;
      if (!object.Equals(Player, other.Player)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Action.Length != 0) hash ^= Action.GetHashCode();
      if (Bet != 0) hash ^= Bet.GetHashCode();
      if (GamePin != 0) hash ^= GamePin.GetHashCode();
      if (player_ != null) hash ^= Player.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Action.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Action);
      }
      if (Bet != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Bet);
      }
      if (GamePin != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GamePin);
      }
      if (player_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Player);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Action.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Action);
      }
      if (Bet != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Bet);
      }
      if (GamePin != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GamePin);
      }
      if (player_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Player);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Action.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Action);
      }
      if (Bet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bet);
      }
      if (GamePin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GamePin);
      }
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Action.Length != 0) {
        Action = other.Action;
      }
      if (other.Bet != 0) {
        Bet = other.Bet;
      }
      if (other.GamePin != 0) {
        GamePin = other.GamePin;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          Player = new global::GrpcConsoleClient.GPlayer();
        }
        Player.MergeFrom(other.Player);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Action = input.ReadString();
            break;
          }
          case 16: {
            Bet = input.ReadInt32();
            break;
          }
          case 24: {
            GamePin = input.ReadInt32();
            break;
          }
          case 34: {
            if (player_ == null) {
              Player = new global::GrpcConsoleClient.GPlayer();
            }
            input.ReadMessage(Player);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Action = input.ReadString();
            break;
          }
          case 16: {
            Bet = input.ReadInt32();
            break;
          }
          case 24: {
            GamePin = input.ReadInt32();
            break;
          }
          case 34: {
            if (player_ == null) {
              Player = new global::GrpcConsoleClient.GPlayer();
            }
            input.ReadMessage(Player);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GPlayer : pb::IMessage<GPlayer>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GPlayer> _parser = new pb::MessageParser<GPlayer>(() => new GPlayer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcConsoleClient.GameReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPlayer(GPlayer other) : this() {
      wallet_ = other.wallet_;
      name_ = other.name_;
      isRoomOwner_ = other.isRoomOwner_;
      bestCombo_ = other.bestCombo_;
      action_ = other.action_;
      bet_ = other.bet_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPlayer Clone() {
      return new GPlayer(this);
    }

    /// <summary>Field number for the "wallet" field.</summary>
    public const int WalletFieldNumber = 2;
    private float wallet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Wallet {
      get { return wallet_; }
      set {
        wallet_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isRoomOwner" field.</summary>
    public const int IsRoomOwnerFieldNumber = 3;
    private bool isRoomOwner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRoomOwner {
      get { return isRoomOwner_; }
      set {
        isRoomOwner_ = value;
      }
    }

    /// <summary>Field number for the "bestCombo" field.</summary>
    public const int BestComboFieldNumber = 4;
    private string bestCombo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BestCombo {
      get { return bestCombo_; }
      set {
        bestCombo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 5;
    private int action_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "bet" field.</summary>
    public const int BetFieldNumber = 7;
    private float bet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Bet {
      get { return bet_; }
      set {
        bet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Wallet, other.Wallet)) return false;
      if (Name != other.Name) return false;
      if (IsRoomOwner != other.IsRoomOwner) return false;
      if (BestCombo != other.BestCombo) return false;
      if (Action != other.Action) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Bet, other.Bet)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Wallet != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Wallet);
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (IsRoomOwner != false) hash ^= IsRoomOwner.GetHashCode();
      if (BestCombo.Length != 0) hash ^= BestCombo.GetHashCode();
      if (Action != 0) hash ^= Action.GetHashCode();
      if (Bet != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Bet);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Wallet != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Wallet);
      }
      if (IsRoomOwner != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsRoomOwner);
      }
      if (BestCombo.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(BestCombo);
      }
      if (Action != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Action);
      }
      if (Bet != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Bet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Wallet != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Wallet);
      }
      if (IsRoomOwner != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsRoomOwner);
      }
      if (BestCombo.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(BestCombo);
      }
      if (Action != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Action);
      }
      if (Bet != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Bet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Wallet != 0F) {
        size += 1 + 4;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (IsRoomOwner != false) {
        size += 1 + 1;
      }
      if (BestCombo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BestCombo);
      }
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Action);
      }
      if (Bet != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GPlayer other) {
      if (other == null) {
        return;
      }
      if (other.Wallet != 0F) {
        Wallet = other.Wallet;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.IsRoomOwner != false) {
        IsRoomOwner = other.IsRoomOwner;
      }
      if (other.BestCombo.Length != 0) {
        BestCombo = other.BestCombo;
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      if (other.Bet != 0F) {
        Bet = other.Bet;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 21: {
            Wallet = input.ReadFloat();
            break;
          }
          case 24: {
            IsRoomOwner = input.ReadBool();
            break;
          }
          case 34: {
            BestCombo = input.ReadString();
            break;
          }
          case 40: {
            Action = input.ReadInt32();
            break;
          }
          case 61: {
            Bet = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 21: {
            Wallet = input.ReadFloat();
            break;
          }
          case 24: {
            IsRoomOwner = input.ReadBool();
            break;
          }
          case 34: {
            BestCombo = input.ReadString();
            break;
          }
          case 40: {
            Action = input.ReadInt32();
            break;
          }
          case 61: {
            Bet = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ActionRequest : pb::IMessage<ActionRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ActionRequest> _parser = new pb::MessageParser<ActionRequest>(() => new ActionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcConsoleClient.GameReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionRequest(ActionRequest other) : this() {
      gamePin_ = other.gamePin_;
      name_ = other.name_;
      bet_ = other.bet_;
      action_ = other.action_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionRequest Clone() {
      return new ActionRequest(this);
    }

    /// <summary>Field number for the "gamePin" field.</summary>
    public const int GamePinFieldNumber = 1;
    private int gamePin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GamePin {
      get { return gamePin_; }
      set {
        gamePin_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bet" field.</summary>
    public const int BetFieldNumber = 3;
    private int bet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bet {
      get { return bet_; }
      set {
        bet_ = value;
      }
    }

    /// <summary>Field number for the "Action" field.</summary>
    public const int ActionFieldNumber = 4;
    private int action_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GamePin != other.GamePin) return false;
      if (Name != other.Name) return false;
      if (Bet != other.Bet) return false;
      if (Action != other.Action) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GamePin != 0) hash ^= GamePin.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Bet != 0) hash ^= Bet.GetHashCode();
      if (Action != 0) hash ^= Action.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GamePin != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GamePin);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Bet != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Bet);
      }
      if (Action != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Action);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GamePin != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GamePin);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Bet != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Bet);
      }
      if (Action != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Action);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GamePin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GamePin);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Bet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bet);
      }
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Action);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionRequest other) {
      if (other == null) {
        return;
      }
      if (other.GamePin != 0) {
        GamePin = other.GamePin;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Bet != 0) {
        Bet = other.Bet;
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GamePin = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Bet = input.ReadInt32();
            break;
          }
          case 32: {
            Action = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GamePin = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Bet = input.ReadInt32();
            break;
          }
          case 32: {
            Action = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ActionResponse : pb::IMessage<ActionResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ActionResponse> _parser = new pb::MessageParser<ActionResponse>(() => new ActionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcConsoleClient.GameReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionResponse(ActionResponse other) : this() {
      success_ = other.success_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionResponse Clone() {
      return new ActionResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionResponse other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class StartGameRequest : pb::IMessage<StartGameRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StartGameRequest> _parser = new pb::MessageParser<StartGameRequest>(() => new StartGameRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartGameRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcConsoleClient.GameReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartGameRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartGameRequest(StartGameRequest other) : this() {
      gamepin_ = other.gamepin_;
      playerName_ = other.playerName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartGameRequest Clone() {
      return new StartGameRequest(this);
    }

    /// <summary>Field number for the "gamepin" field.</summary>
    public const int GamepinFieldNumber = 1;
    private int gamepin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gamepin {
      get { return gamepin_; }
      set {
        gamepin_ = value;
      }
    }

    /// <summary>Field number for the "playerName" field.</summary>
    public const int PlayerNameFieldNumber = 2;
    private string playerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartGameRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartGameRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Gamepin != other.Gamepin) return false;
      if (PlayerName != other.PlayerName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Gamepin != 0) hash ^= Gamepin.GetHashCode();
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Gamepin != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Gamepin);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Gamepin != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Gamepin);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Gamepin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gamepin);
      }
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartGameRequest other) {
      if (other == null) {
        return;
      }
      if (other.Gamepin != 0) {
        Gamepin = other.Gamepin;
      }
      if (other.PlayerName.Length != 0) {
        PlayerName = other.PlayerName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Gamepin = input.ReadInt32();
            break;
          }
          case 18: {
            PlayerName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Gamepin = input.ReadInt32();
            break;
          }
          case 18: {
            PlayerName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class StartGameResponse : pb::IMessage<StartGameResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StartGameResponse> _parser = new pb::MessageParser<StartGameResponse>(() => new StartGameResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartGameResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcConsoleClient.GameReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartGameResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartGameResponse(StartGameResponse other) : this() {
      success_ = other.success_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartGameResponse Clone() {
      return new StartGameResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartGameResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartGameResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartGameResponse other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
